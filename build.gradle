plugins {
    id 'java'
    id 'idea'
    id 'org.springframework.boot' version '3.2.5'
    //id 'com.palantir.docker' version '0.22.1'
    //id 'com.palantir.docker-run' version '0.22.1'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'java-library-distribution'

group = 'main.example'
version = '1.0-SNAPSHOT'

repositories {
    gradlePluginPortal()
    mavenCentral()
}

sourceSets
        {
            main {
                java {
                        srcDir('src')
                    }
            }
        }

compileJava
        {
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }

//configurations.all
//        {
//            exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
//        }

//defining a variable in gradle
def version = '3.2.5'

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-websocket:${version}",
            "org.springframework.boot:spring-boot-autoconfigure:${version}",
            "org.springframework.boot:spring-boot-starter-web:${version}",
            //"org.springframework.boot:spring-boot-starter-data-jpa:${version}",
            'com.h2database:h2:2.2.220',
            'commons-codec:commons-codec:1.15',
            //We are excluding this so not needed but for example maybe
            "org.springframework.boot:spring-boot-starter-logging:${version}",
            "org.springframework.boot:spring-boot-starter-log4j2:${version}",
            'org.projectlombok:lombok:1.18.22',
            'org.json:json:20240205'

    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

//Tells gradle to run task named x after running task y and task y is the zip
//tasks.named("distTar").configure {dependsOn("bootJar")}
//tasks.named("distZip").configure {dependsOn("bootJar")}

bootRun
        {
            mainClass = 'main.example.Application'
        }



test {
    useJUnitPlatform()
}